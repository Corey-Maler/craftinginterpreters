
// This code is autogenerated, check generateAst.ts

import { Expr, Variable } from './Expr';

import { Nullable } from '../utils'; 
import { Token } from '../src/Token';
export interface Visitor<R> {
	visitBlockStmt(stmt: Block): R
	visitClassStmt(stmt: Class): R
	visitExpressionStmt(stmt: Expression): R
	visitFnctionStmt(stmt: Fnction): R
	visitIfStmt(stmt: If): R
	visitPrintStmt(stmt: Print): R
	visitReturnStmt(stmt: Return): R
	visitVarStmt(stmt: Var): R
	visitWhileStmt(stmt: While): R
}

export abstract class Stmt {
  abstract accept<R>(visitor: Visitor<R>): R;
};

    
export class Block extends Stmt {
      constructor(public statements: Stmt[]) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitBlockStmt(this);
  }

}
export class Class extends Stmt {
      constructor(public name: Token, public superklass: Nullable<Variable>, public methods: Array<Fnction>) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitClassStmt(this);
  }

}
export class Expression extends Stmt {
      constructor(public expression: Expr) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitExpressionStmt(this);
  }

}
export class Fnction extends Stmt {
      constructor(public name: Token, public params: Array<Token>, public body: Array<Stmt>) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitFnctionStmt(this);
  }

}
export class If extends Stmt {
      constructor(public condition: Expr, public thenBranch: Stmt, public elseBranch: Nullable<Stmt>) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitIfStmt(this);
  }

}
export class Print extends Stmt {
      constructor(public expression: Expr) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitPrintStmt(this);
  }

}
export class Return extends Stmt {
      constructor(public keyword: Token, public value: Nullable<Expr>) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitReturnStmt(this);
  }

}
export class Var extends Stmt {
      constructor(public name: Token, public initializer: Nullable<Expr>) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitVarStmt(this);
  }

}
export class While extends Stmt {
      constructor(public condition: Expr, public body: Stmt) {
        super();
      };

  accept<R>(visitor: Visitor<R>): R {
    return visitor.visitWhileStmt(this);
  }

}
